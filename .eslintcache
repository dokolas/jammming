[{"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/index.js":"1","/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/reportWebVitals.js":"2","/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/App/App.js":"3","/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/SearchBar/SearchBar.js":"4","/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/SearchResults/SearchResults.js":"5","/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/Playlist/Playlist.js":"6","/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/TrackList/TrackList.js":"7","/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/Track/Track.js":"8","/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/util/Spotify.js":"9"},{"size":517,"mtime":1607821777569,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1607743093312,"results":"12","hashOfConfig":"11"},{"size":2591,"mtime":1608175092621,"results":"13","hashOfConfig":"11"},{"size":732,"mtime":1608173309693,"results":"14","hashOfConfig":"11"},{"size":468,"mtime":1607916495588,"results":"15","hashOfConfig":"11"},{"size":830,"mtime":1607917554398,"results":"16","hashOfConfig":"11"},{"size":673,"mtime":1607917560957,"results":"17","hashOfConfig":"11"},{"size":1103,"mtime":1608174332098,"results":"18","hashOfConfig":"11"},{"size":2883,"mtime":1608173138569,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i8kzi5",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/index.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/reportWebVitals.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/App/App.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/SearchBar/SearchBar.js",[],["40","41"],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/SearchResults/SearchResults.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/Playlist/Playlist.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/TrackList/TrackList.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/Components/Track/Track.js",[],"/Users/dokolas/Desktop/Projects/Codeacademy Projects/jammming/jammming/src/util/Spotify.js",["42"],"import { SearchBar } from \"../Components/SearchBar/SearchBar\";\n\nlet accessToken;\nlet clientId = 'f5095fc963534c219ccaf97117b90e9f';\nlet redirectUri = 'http://localhost:3000/';\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\n\n        if (accessTokenMatch && expiresInMatch){\n            accessToken = accessTokenMatch[1];\n            let expiresIn = Number(expiresInMatch[1]);\n\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n        }\n        else{\n            const accessUri = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUri;\n        }\n    },\n    \n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks){\n                return [];\n            }\n\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri,\n                preview: track.preview_url\n            }))\n        })\n    },\n\n    savePlaylist(name, trackUris){\n        if (!name && !trackUris.length){\n            return;\n        }\n        \n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistID = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks`, \n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                })\n            })\n        });\n    },\n}\n\nexport default Spotify;",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":10,"nodeType":"49","messageId":"50","endLine":1,"endColumn":19},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'SearchBar' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]